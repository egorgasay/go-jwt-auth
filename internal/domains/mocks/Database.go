// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "go-jwt-auth/internal/models"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

type Database_Expecter struct {
	mock *mock.Mock
}

func (_m *Database) EXPECT() *Database_Expecter {
	return &Database_Expecter{mock: &_m.Mock}
}

// DeleteTokenData provides a mock function with given fields: ctx, guid, hash
func (_m *Database) DeleteTokenData(ctx context.Context, guid string, hash string) error {
	ret := _m.Called(ctx, guid, hash)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, guid, hash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_DeleteTokenData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTokenData'
type Database_DeleteTokenData_Call struct {
	*mock.Call
}

// DeleteTokenData is a helper method to define mock.On call
//   - ctx context.Context
//   - guid string
//   - hash string
func (_e *Database_Expecter) DeleteTokenData(ctx interface{}, guid interface{}, hash interface{}) *Database_DeleteTokenData_Call {
	return &Database_DeleteTokenData_Call{Call: _e.mock.On("DeleteTokenData", ctx, guid, hash)}
}

func (_c *Database_DeleteTokenData_Call) Run(run func(ctx context.Context, guid string, hash string)) *Database_DeleteTokenData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Database_DeleteTokenData_Call) Return(_a0 error) *Database_DeleteTokenData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_DeleteTokenData_Call) RunAndReturn(run func(context.Context, string, string) error) *Database_DeleteTokenData_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokensDataByGUID provides a mock function with given fields: ctx, guid
func (_m *Database) GetTokensDataByGUID(ctx context.Context, guid string) ([]models.TokenData, error) {
	ret := _m.Called(ctx, guid)

	var r0 []models.TokenData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.TokenData, error)); ok {
		return rf(ctx, guid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.TokenData); ok {
		r0 = rf(ctx, guid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.TokenData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, guid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetTokensDataByGUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokensDataByGUID'
type Database_GetTokensDataByGUID_Call struct {
	*mock.Call
}

// GetTokensDataByGUID is a helper method to define mock.On call
//   - ctx context.Context
//   - guid string
func (_e *Database_Expecter) GetTokensDataByGUID(ctx interface{}, guid interface{}) *Database_GetTokensDataByGUID_Call {
	return &Database_GetTokensDataByGUID_Call{Call: _e.mock.On("GetTokensDataByGUID", ctx, guid)}
}

func (_c *Database_GetTokensDataByGUID_Call) Run(run func(ctx context.Context, guid string)) *Database_GetTokensDataByGUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Database_GetTokensDataByGUID_Call) Return(t []models.TokenData, err error) *Database_GetTokensDataByGUID_Call {
	_c.Call.Return(t, err)
	return _c
}

func (_c *Database_GetTokensDataByGUID_Call) RunAndReturn(run func(context.Context, string) ([]models.TokenData, error)) *Database_GetTokensDataByGUID_Call {
	_c.Call.Return(run)
	return _c
}

// SaveTokenData provides a mock function with given fields: ctx, t
func (_m *Database) SaveTokenData(ctx context.Context, t models.TokenData) error {
	ret := _m.Called(ctx, t)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.TokenData) error); ok {
		r0 = rf(ctx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_SaveTokenData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveTokenData'
type Database_SaveTokenData_Call struct {
	*mock.Call
}

// SaveTokenData is a helper method to define mock.On call
//   - ctx context.Context
//   - t models.TokenData
func (_e *Database_Expecter) SaveTokenData(ctx interface{}, t interface{}) *Database_SaveTokenData_Call {
	return &Database_SaveTokenData_Call{Call: _e.mock.On("SaveTokenData", ctx, t)}
}

func (_c *Database_SaveTokenData_Call) Run(run func(ctx context.Context, t models.TokenData)) *Database_SaveTokenData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.TokenData))
	})
	return _c
}

func (_c *Database_SaveTokenData_Call) Return(_a0 error) *Database_SaveTokenData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_SaveTokenData_Call) RunAndReturn(run func(context.Context, models.TokenData) error) *Database_SaveTokenData_Call {
	_c.Call.Return(run)
	return _c
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
