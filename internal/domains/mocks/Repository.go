// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "go-jwt-auth/internal/models"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// GetRefTokenAndGUID provides a mock function with given fields: ctx, refresh
func (_m *Repository) GetRefTokenAndGUID(ctx context.Context, refresh string) (string, models.RefreshToken, error) {
	ret := _m.Called(ctx, refresh)

	var r0 string
	var r1 models.RefreshToken
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, models.RefreshToken, error)); ok {
		return rf(ctx, refresh)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, refresh)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) models.RefreshToken); ok {
		r1 = rf(ctx, refresh)
	} else {
		r1 = ret.Get(1).(models.RefreshToken)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, refresh)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Repository_GetRefTokenAndGUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefTokenAndGUID'
type Repository_GetRefTokenAndGUID_Call struct {
	*mock.Call
}

// GetRefTokenAndGUID is a helper method to define mock.On call
//   - ctx context.Context
//   - refresh string
func (_e *Repository_Expecter) GetRefTokenAndGUID(ctx interface{}, refresh interface{}) *Repository_GetRefTokenAndGUID_Call {
	return &Repository_GetRefTokenAndGUID_Call{Call: _e.mock.On("GetRefTokenAndGUID", ctx, refresh)}
}

func (_c *Repository_GetRefTokenAndGUID_Call) Run(run func(ctx context.Context, refresh string)) *Repository_GetRefTokenAndGUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_GetRefTokenAndGUID_Call) Return(guid string, rt models.RefreshToken, err error) *Repository_GetRefTokenAndGUID_Call {
	_c.Call.Return(guid, rt, err)
	return _c
}

func (_c *Repository_GetRefTokenAndGUID_Call) RunAndReturn(run func(context.Context, string) (string, models.RefreshToken, error)) *Repository_GetRefTokenAndGUID_Call {
	_c.Call.Return(run)
	return _c
}

// SaveRefresh provides a mock function with given fields: ctx, guid, refresh
func (_m *Repository) SaveRefresh(ctx context.Context, guid string, refresh models.RefreshToken) error {
	ret := _m.Called(ctx, guid, refresh)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.RefreshToken) error); ok {
		r0 = rf(ctx, guid, refresh)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_SaveRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveRefresh'
type Repository_SaveRefresh_Call struct {
	*mock.Call
}

// SaveRefresh is a helper method to define mock.On call
//   - ctx context.Context
//   - guid string
//   - refresh models.RefreshToken
func (_e *Repository_Expecter) SaveRefresh(ctx interface{}, guid interface{}, refresh interface{}) *Repository_SaveRefresh_Call {
	return &Repository_SaveRefresh_Call{Call: _e.mock.On("SaveRefresh", ctx, guid, refresh)}
}

func (_c *Repository_SaveRefresh_Call) Run(run func(ctx context.Context, guid string, refresh models.RefreshToken)) *Repository_SaveRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(models.RefreshToken))
	})
	return _c
}

func (_c *Repository_SaveRefresh_Call) Return(_a0 error) *Repository_SaveRefresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_SaveRefresh_Call) RunAndReturn(run func(context.Context, string, models.RefreshToken) error) *Repository_SaveRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
