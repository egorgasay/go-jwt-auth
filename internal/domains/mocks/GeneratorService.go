// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// GeneratorService is an autogenerated mock type for the GeneratorService type
type GeneratorService struct {
	mock.Mock
}

type GeneratorService_Expecter struct {
	mock *mock.Mock
}

func (_m *GeneratorService) EXPECT() *GeneratorService_Expecter {
	return &GeneratorService_Expecter{mock: &_m.Mock}
}

// AccessToken provides a mock function with given fields: ctx, guid, key, accessTTL
func (_m *GeneratorService) AccessToken(ctx context.Context, guid string, key []byte, accessTTL time.Duration) (string, int64, error) {
	ret := _m.Called(ctx, guid, key, accessTTL)

	var r0 string
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, time.Duration) (string, int64, error)); ok {
		return rf(ctx, guid, key, accessTTL)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, time.Duration) string); ok {
		r0 = rf(ctx, guid, key, accessTTL)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte, time.Duration) int64); ok {
		r1 = rf(ctx, guid, key, accessTTL)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, []byte, time.Duration) error); ok {
		r2 = rf(ctx, guid, key, accessTTL)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GeneratorService_AccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AccessToken'
type GeneratorService_AccessToken_Call struct {
	*mock.Call
}

// AccessToken is a helper method to define mock.On call
//   - ctx context.Context
//   - guid string
//   - key []byte
//   - accessTTL time.Duration
func (_e *GeneratorService_Expecter) AccessToken(ctx interface{}, guid interface{}, key interface{}, accessTTL interface{}) *GeneratorService_AccessToken_Call {
	return &GeneratorService_AccessToken_Call{Call: _e.mock.On("AccessToken", ctx, guid, key, accessTTL)}
}

func (_c *GeneratorService_AccessToken_Call) Run(run func(ctx context.Context, guid string, key []byte, accessTTL time.Duration)) *GeneratorService_AccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte), args[3].(time.Duration))
	})
	return _c
}

func (_c *GeneratorService_AccessToken_Call) Return(token string, iat int64, err error) *GeneratorService_AccessToken_Call {
	_c.Call.Return(token, iat, err)
	return _c
}

func (_c *GeneratorService_AccessToken_Call) RunAndReturn(run func(context.Context, string, []byte, time.Duration) (string, int64, error)) *GeneratorService_AccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function with given fields: ctx, refreshTTL
func (_m *GeneratorService) RefreshToken(ctx context.Context, refreshTTL time.Duration) (string, int64, error) {
	ret := _m.Called(ctx, refreshTTL)

	var r0 string
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) (string, int64, error)); ok {
		return rf(ctx, refreshTTL)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) string); ok {
		r0 = rf(ctx, refreshTTL)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Duration) int64); ok {
		r1 = rf(ctx, refreshTTL)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, time.Duration) error); ok {
		r2 = rf(ctx, refreshTTL)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GeneratorService_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type GeneratorService_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshTTL time.Duration
func (_e *GeneratorService_Expecter) RefreshToken(ctx interface{}, refreshTTL interface{}) *GeneratorService_RefreshToken_Call {
	return &GeneratorService_RefreshToken_Call{Call: _e.mock.On("RefreshToken", ctx, refreshTTL)}
}

func (_c *GeneratorService_RefreshToken_Call) Run(run func(ctx context.Context, refreshTTL time.Duration)) *GeneratorService_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration))
	})
	return _c
}

func (_c *GeneratorService_RefreshToken_Call) Return(token string, iat int64, err error) *GeneratorService_RefreshToken_Call {
	_c.Call.Return(token, iat, err)
	return _c
}

func (_c *GeneratorService_RefreshToken_Call) RunAndReturn(run func(context.Context, time.Duration) (string, int64, error)) *GeneratorService_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewGeneratorService creates a new instance of GeneratorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGeneratorService(t interface {
	mock.TestingT
	Cleanup(func())
}) *GeneratorService {
	mock := &GeneratorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
