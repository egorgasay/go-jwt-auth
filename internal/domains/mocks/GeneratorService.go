// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// GeneratorService is an autogenerated mock type for the GeneratorService type
type GeneratorService struct {
	mock.Mock
}

type GeneratorService_Expecter struct {
	mock *mock.Mock
}

func (_m *GeneratorService) EXPECT() *GeneratorService_Expecter {
	return &GeneratorService_Expecter{mock: &_m.Mock}
}

// AccessToken provides a mock function with given fields: ctx, guid, key
func (_m *GeneratorService) AccessToken(ctx context.Context, guid string, key []byte) (string, error) {
	ret := _m.Called(ctx, guid, key)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) (string, error)); ok {
		return rf(ctx, guid, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) string); ok {
		r0 = rf(ctx, guid, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(ctx, guid, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GeneratorService_AccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AccessToken'
type GeneratorService_AccessToken_Call struct {
	*mock.Call
}

// AccessToken is a helper method to define mock.On call
//   - ctx context.Context
//   - guid string
//   - key []byte
func (_e *GeneratorService_Expecter) AccessToken(ctx interface{}, guid interface{}, key interface{}) *GeneratorService_AccessToken_Call {
	return &GeneratorService_AccessToken_Call{Call: _e.mock.On("AccessToken", ctx, guid, key)}
}

func (_c *GeneratorService_AccessToken_Call) Run(run func(ctx context.Context, guid string, key []byte)) *GeneratorService_AccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *GeneratorService_AccessToken_Call) Return(token string, err error) *GeneratorService_AccessToken_Call {
	_c.Call.Return(token, err)
	return _c
}

func (_c *GeneratorService_AccessToken_Call) RunAndReturn(run func(context.Context, string, []byte) (string, error)) *GeneratorService_AccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function with given fields: ctx
func (_m *GeneratorService) RefreshToken(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GeneratorService_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type GeneratorService_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - ctx context.Context
func (_e *GeneratorService_Expecter) RefreshToken(ctx interface{}) *GeneratorService_RefreshToken_Call {
	return &GeneratorService_RefreshToken_Call{Call: _e.mock.On("RefreshToken", ctx)}
}

func (_c *GeneratorService_RefreshToken_Call) Run(run func(ctx context.Context)) *GeneratorService_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GeneratorService_RefreshToken_Call) Return(token string, err error) *GeneratorService_RefreshToken_Call {
	_c.Call.Return(token, err)
	return _c
}

func (_c *GeneratorService_RefreshToken_Call) RunAndReturn(run func(context.Context) (string, error)) *GeneratorService_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewGeneratorService creates a new instance of GeneratorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGeneratorService(t interface {
	mock.TestingT
	Cleanup(func())
}) *GeneratorService {
	mock := &GeneratorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
